// <auto-generated />
using System;
using ClinicWebCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClinicWebCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200819145204_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("ClinicWebCore.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apartment")
                        .HasColumnName("apartment")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("House")
                        .HasColumnName("house")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Locality")
                        .HasColumnName("locality")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Region")
                        .HasColumnName("region")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ZipCode")
                        .HasColumnName("zipcode")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressID = 1,
                            Apartment = "24",
                            Country = "Україна",
                            House = "151",
                            Locality = "Запоріжжя",
                            Region = "Запорізька область",
                            Street = "пр. Соборний",
                            ZipCode = "69000"
                        },
                        new
                        {
                            AddressID = 2,
                            Apartment = "7",
                            Country = "Україна",
                            House = "11",
                            Locality = "Запоріжжя",
                            Region = "Запорізька область",
                            Street = "площф Маяковського",
                            ZipCode = "69001"
                        },
                        new
                        {
                            AddressID = 3,
                            Apartment = "112",
                            Country = "Україна",
                            House = "230",
                            Locality = "Запоріжжя",
                            Region = "Запорізька область",
                            Street = "пр. Ювілейний",
                            ZipCode = "69003"
                        },
                        new
                        {
                            AddressID = 4,
                            Apartment = "19",
                            Country = "Україна",
                            House = "10",
                            Locality = "Запоріжжя",
                            Region = "Запорізька область",
                            Street = "бульвар Шевченка",
                            ZipCode = "69004"
                        },
                        new
                        {
                            AddressID = 5,
                            Apartment = "129",
                            Country = "Україна",
                            House = "97",
                            Locality = "Запоріжжя",
                            Region = "Запорізька область",
                            Street = "вулиця Перемоги ",
                            ZipCode = "69005"
                        },
                        new
                        {
                            AddressID = 6,
                            Apartment = "39",
                            Country = "Україна",
                            House = "117",
                            Locality = "Запоріжжя",
                            Region = "Запорізька область",
                            Street = "вулиця Запорізького Козацтва",
                            ZipCode = "69003"
                        });
                });

            modelBuilder.Entity("ClinicWebCore.Models.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressID")
                        .HasColumnName("address_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Birthday")
                        .HasColumnName("birthday")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("timestamp")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("timestamp")
                        .HasMaxLength(255);

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnName("middle_name")
                        .HasColumnType("timestamp")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp");

                    b.HasKey("ContactID");

                    b.HasIndex("AddressID");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ContactID = 1,
                            AddressID = 1,
                            Birthday = new DateTime(1950, 3, 3, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Email = "olga@com.ua",
                            FirstName = "Ольга",
                            LastName = "Бородіна",
                            MiddleName = "Вікторівна",
                            Phone = "Запоріжжя",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContactID = 2,
                            AddressID = 2,
                            Birthday = new DateTime(1955, 11, 23, 21, 5, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Email = "mariya@com.ua",
                            FirstName = "Марія",
                            LastName = "Колесник",
                            MiddleName = "Олександрівна",
                            Phone = "Запоріжжя",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContactID = 3,
                            AddressID = 3,
                            Birthday = new DateTime(1970, 7, 15, 14, 35, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Email = "semen@com.ua",
                            FirstName = "Семен",
                            LastName = "Коротич",
                            MiddleName = "Павлович",
                            Phone = "Запоріжжя",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContactID = 4,
                            AddressID = 1,
                            Birthday = new DateTime(1951, 8, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Email = "ivan@com.ua",
                            FirstName = "Іван",
                            LastName = "Бородін",
                            MiddleName = "Володимирович",
                            Phone = "Запоріжжя",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContactID = 5,
                            AddressID = 2,
                            Birthday = new DateTime(1954, 5, 4, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Email = "gnat@com.ua",
                            FirstName = "Гнат",
                            LastName = "Колесник",
                            MiddleName = "Миколайович",
                            Phone = "Запоріжжя",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContactID = 6,
                            AddressID = 2,
                            Birthday = new DateTime(1981, 2, 9, 8, 38, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Email = "alena@com.ua",
                            FirstName = "Олена",
                            LastName = "Колесник",
                            MiddleName = "Гнатовна",
                            Phone = "Запоріжжя",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContactID = 7,
                            AddressID = 4,
                            Birthday = new DateTime(1981, 3, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Email = "vitaly@com.ua",
                            FirstName = "Віталій",
                            LastName = "Чуб",
                            MiddleName = "Сергійович",
                            Phone = "Запоріжжя",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContactID = 8,
                            AddressID = 5,
                            Birthday = new DateTime(2014, 9, 14, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Email = "ganna@com.ua",
                            FirstName = "Ганна",
                            LastName = "Сумська",
                            MiddleName = "Іванівна",
                            Phone = "Запоріжжя",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContactID = 9,
                            AddressID = 6,
                            Birthday = new DateTime(1991, 12, 12, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Email = "olesyaa@com.ua",
                            FirstName = "Олеся",
                            LastName = "Богдан",
                            MiddleName = "Романівна",
                            Phone = "Запоріжжя",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ClinicWebCore.Models.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ParentID")
                        .HasColumnName("parent_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Name = "Адміністрація",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DepartmentID = 2,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Name = "Головний лікарь",
                            ParentID = 1,
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DepartmentID = 3,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Name = "Стаціонар",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DepartmentID = 4,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Name = "хірургічне відділення",
                            ParentID = 3,
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DepartmentID = 5,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Name = "Амбулаторно-поліклінічна служба",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DepartmentID = 6,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Name = "амбулаторне ортопедично-травматологічне відділення",
                            ParentID = 5,
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DepartmentID = 7,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            Name = "терапевтичне відділення",
                            ParentID = 3,
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ClinicWebCore.Models.DepartmentDoc", b =>
                {
                    b.Property<int>("DepartmentID")
                        .HasColumnName("department_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocID")
                        .HasColumnName("doc_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("DepartmentID", "DocID");

                    b.HasIndex("DocID");

                    b.ToTable("DepartmentDocs");
                });

            modelBuilder.Entity("ClinicWebCore.Models.Doc", b =>
                {
                    b.Property<int>("DocID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactID")
                        .HasColumnName("contact_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentID")
                        .HasColumnName("department_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("HiredAt")
                        .HasColumnName("hired_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasColumnName("office")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Specialty")
                        .HasColumnName("specialty")
                        .HasColumnType("varchar(255)");

                    b.HasKey("DocID");

                    b.HasIndex("ContactID");

                    b.ToTable("Docs");

                    b.HasData(
                        new
                        {
                            DocID = 1,
                            ContactID = 2,
                            DepartmentID = 1,
                            HiredAt = new DateTime(1978, 1, 1, 10, 30, 1, 0, DateTimeKind.Unspecified),
                            Office = "101",
                            Specialty = "терапевт"
                        },
                        new
                        {
                            DocID = 2,
                            ContactID = 5,
                            DepartmentID = 2,
                            HiredAt = new DateTime(1985, 3, 21, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Office = "207",
                            Specialty = "хірург"
                        },
                        new
                        {
                            DocID = 3,
                            ContactID = 6,
                            DepartmentID = 1,
                            HiredAt = new DateTime(2010, 12, 27, 14, 0, 15, 0, DateTimeKind.Unspecified),
                            Office = "101",
                            Specialty = "педіатр"
                        },
                        new
                        {
                            DocID = 4,
                            ContactID = 3,
                            DepartmentID = 3,
                            HiredAt = new DateTime(2000, 7, 12, 8, 37, 0, 0, DateTimeKind.Unspecified),
                            Office = "23",
                            Specialty = "кардіолог"
                        });
                });

            modelBuilder.Entity("ClinicWebCore.Models.DocSchedule", b =>
                {
                    b.Property<int>("DocScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.Property<int?>("DepartmentID")
                        .HasColumnName("department_id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DocID")
                        .HasColumnName("doc_id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DocScheduleYear")
                        .HasColumnName("doc_schedule_year")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FinishAppointmentAt")
                        .HasColumnName("finish_appointment_at")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsVisitPatient")
                        .HasColumnName("is_visit_patient")
                        .HasColumnType("tinyint");

                    b.Property<int?>("PatientID")
                        .HasColumnName("patient_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartAppointmentAt")
                        .HasColumnName("start_appointment_at")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp");

                    b.Property<int?>("WeekDay")
                        .HasColumnName("week_day")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WeekNumber")
                        .HasColumnName("week_number")
                        .HasColumnType("INTEGER");

                    b.HasKey("DocScheduleID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DocID");

                    b.HasIndex("PatientID");

                    b.ToTable("DocSchedules");
                });

            modelBuilder.Entity("ClinicWebCore.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactID")
                        .HasColumnName("contact_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("MedicalHistoryRegistoreNumber")
                        .IsRequired()
                        .HasColumnName("medical_history_registore_number")
                        .HasColumnType("timestamp")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp");

                    b.HasKey("PatientID");

                    b.HasIndex("ContactID")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientID = 1,
                            ContactID = 1,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistoryRegistoreNumber = "MHR-001",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PatientID = 2,
                            ContactID = 4,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistoryRegistoreNumber = "MHR-002",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PatientID = 3,
                            ContactID = 7,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistoryRegistoreNumber = "MHR-003",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PatientID = 4,
                            ContactID = 8,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistoryRegistoreNumber = "MHR-004",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PatientID = 5,
                            ContactID = 9,
                            CreatedAt = new DateTime(2019, 8, 20, 15, 18, 0, 0, DateTimeKind.Unspecified),
                            MedicalHistoryRegistoreNumber = "MHR-005",
                            UpdatedAt = new DateTime(2020, 8, 19, 15, 18, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ClinicWebCore.Models.Contact", b =>
                {
                    b.HasOne("ClinicWebCore.Models.Address", "Address")
                        .WithMany("Contacts")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicWebCore.Models.DepartmentDoc", b =>
                {
                    b.HasOne("ClinicWebCore.Models.Department", "Department")
                        .WithMany("DepartmentDocs")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicWebCore.Models.Doc", "Doc")
                        .WithMany("DepartmentDocs")
                        .HasForeignKey("DocID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicWebCore.Models.Doc", b =>
                {
                    b.HasOne("ClinicWebCore.Models.Contact", "Contact")
                        .WithMany("Docs")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicWebCore.Models.DocSchedule", b =>
                {
                    b.HasOne("ClinicWebCore.Models.Department", "Department")
                        .WithMany("DocSchedules")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("ClinicWebCore.Models.Doc", "Doc")
                        .WithMany("DocSchedules")
                        .HasForeignKey("DocID");

                    b.HasOne("ClinicWebCore.Models.Patient", "Patient")
                        .WithMany("DocSchedules")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("ClinicWebCore.Models.Patient", b =>
                {
                    b.HasOne("ClinicWebCore.Models.Contact", "Contact")
                        .WithOne("Patient")
                        .HasForeignKey("ClinicWebCore.Models.Patient", "ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
