// <auto-generated />
using System;
using Clinic.VR;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClinicContextLib.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    [Migration("20200818203301_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Clinic.VR.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apartment")
                        .HasColumnName("apartment")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("House")
                        .HasColumnName("house")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Locality")
                        .HasColumnName("locality")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Region")
                        .HasColumnName("region")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ZipCode")
                        .HasColumnName("zipcode")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Clinic.VR.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressID")
                        .HasColumnName("address_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("CreatedAt")
                        .IsRequired()
                        .HasColumnName("zipcode")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte[]>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("timestamp")
                        .HasMaxLength(255);

                    b.Property<byte[]>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("timestamp")
                        .HasMaxLength(255);

                    b.Property<byte[]>("MiddleName")
                        .IsRequired()
                        .HasColumnName("middle_name")
                        .HasColumnType("timestamp")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte[]>("UpdatedAt")
                        .IsRequired()
                        .HasColumnName("zipcode")
                        .HasColumnType("timestamp");

                    b.HasKey("ContactID");

                    b.HasIndex("AddressID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Clinic.VR.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("CreatedAt")
                        .IsRequired()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ParentID")
                        .HasColumnName("parent_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("UpdatedAt")
                        .IsRequired()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Clinic.VR.DepartmentDoc", b =>
                {
                    b.Property<int>("DepartmentID")
                        .HasColumnName("department_id")
                        .HasColumnType("int");

                    b.Property<int>("DocID")
                        .HasColumnName("doc_id")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID", "DocID");

                    b.HasIndex("DocID");

                    b.ToTable("DepartmentDocs");
                });

            modelBuilder.Entity("Clinic.VR.Doc", b =>
                {
                    b.Property<int>("DocID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactID")
                        .HasColumnName("contact_id")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnName("department_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("HiredAt")
                        .IsRequired()
                        .HasColumnName("hired_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasColumnName("office")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("DocID");

                    b.HasIndex("ContactID");

                    b.ToTable("Docs");
                });

            modelBuilder.Entity("Clinic.VR.DocSchedule", b =>
                {
                    b.Property<int>("DocScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("CreatedAt")
                        .IsRequired()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.Property<int?>("DepartmentID")
                        .HasColumnName("department_id")
                        .HasColumnType("int");

                    b.Property<int?>("DocID")
                        .HasColumnName("doc_id")
                        .HasColumnType("int");

                    b.Property<int?>("DocScheduleYear")
                        .HasColumnName("doc_schedule_year")
                        .HasColumnType("int");

                    b.Property<byte[]>("FinishAppointmentAt")
                        .IsRequired()
                        .HasColumnName("finish_appointment_at")
                        .HasColumnType("timestamp");

                    b.Property<byte>("IsVisitPatient")
                        .HasColumnName("is_visit_patient")
                        .HasColumnType("tinyint");

                    b.Property<int?>("PatientID")
                        .HasColumnName("patient_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("StartAppointmentAt")
                        .IsRequired()
                        .HasColumnName("start_appointment_at")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("UpdatedAt")
                        .IsRequired()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp");

                    b.Property<int?>("WeekDay")
                        .HasColumnName("week_day")
                        .HasColumnType("int");

                    b.Property<int?>("WeekNumber")
                        .HasColumnName("week_number")
                        .HasColumnType("int");

                    b.HasKey("DocScheduleID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DocID");

                    b.HasIndex("PatientID");

                    b.ToTable("DocSchedules");
                });

            modelBuilder.Entity("Clinic.VR.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactID")
                        .HasColumnName("contact_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("CreatedAt")
                        .IsRequired()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("MedicalHistoryRegistoreNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte[]>("UpdatedAt")
                        .IsRequired()
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp");

                    b.HasKey("PatientID");

                    b.HasIndex("ContactID")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Clinic.VR.Contact", b =>
                {
                    b.HasOne("Clinic.VR.Address", "Address")
                        .WithMany("Contacts")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clinic.VR.DepartmentDoc", b =>
                {
                    b.HasOne("Clinic.VR.Department", "Department")
                        .WithMany("DepartmentDocs")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.VR.Doc", "Doc")
                        .WithMany("DepartmentDocs")
                        .HasForeignKey("DocID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clinic.VR.Doc", b =>
                {
                    b.HasOne("Clinic.VR.Contact", "Contact")
                        .WithMany("Docs")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clinic.VR.DocSchedule", b =>
                {
                    b.HasOne("Clinic.VR.Department", "Department")
                        .WithMany("DocSchedules")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Clinic.VR.Doc", "Doc")
                        .WithMany("DocSchedules")
                        .HasForeignKey("DocID");

                    b.HasOne("Clinic.VR.Patient", "Patient")
                        .WithMany("DocSchedules")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("Clinic.VR.Patient", b =>
                {
                    b.HasOne("Clinic.VR.Contact", "Contact")
                        .WithOne("Patient")
                        .HasForeignKey("Clinic.VR.Patient", "ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
